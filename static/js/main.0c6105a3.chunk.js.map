{"version":3,"sources":["shared/constants.tsx","api/useEvents.tsx","hooks/useAccount.ts","components/Loading/loading.svg","components/Loading/Loading.tsx","pages/EnterAddress/EnterAddress.tsx","api/useTokens.tsx","api/useToken.tsx","components/Toolbar/Toolbar.tsx","components/Badge/Badge.tsx","components/BadgeGroup/BadgeGroup.tsx","containers/GroupsContainer.tsx","pages/AddressTokens/AddressTokens.tsx","pages/TokenDetails/TokenDetails.tsx","components/Error/Error.tsx","components/Profile/Profile.tsx","containers/TokensContainer.tsx","containers/App.tsx","index.tsx"],"names":["api","xdai","process","eth","ens","projectID","key","parseEvents","apiEvents","poapEvents","forEach","event","newEvent","eventID","id","fancy_id","name","description","city","country","event_url","imageURL","image_url","year","toString","start_date","timestampDate","Date","parse","virtual_event","useEvents","useState","alreadyFetched","error","data","events","setEvents","execute","a","fetch","response","json","jsonResponse","ok","Error","fetchEvents","useCallback","generateFancyEth","account","slice","isValidAddress","test","isValidEnsFormat","RegExp","useAccount","verified","fancyEth","setAccountState","ethers","providers","InfuraProvider","infura","projectId","projectSecret","provider","unverifiedAccount","lowerCaseAccount","toLowerCase","lookupAddress","ensFromEth","resolveName","address","lowerCaseAddress","setAccount","Loading","useEffect","timmer","setTimeout","location","reload","clearTimeout","className","alt","src","loadingGif","EnterAddress","history","useHistory","loading","setLoading","push","onSubmit","e","preventDefault","target","value","trim","type","placeholder","maxLength","minLength","pattern","autoFocus","required","parseTokens","chain","apiTokens","parsedTokens","tokens","apiToken","tokenID","parseInt","fetchGraphQL","endpoint","query","params","method","headers","Accept","body","JSON","stringify","errors","useTokens","setTokens","Promise","all","ethResponse","xdaiResponse","getTokens","useToken","token","setToken","accountBadges","length","badge","filter","accountBadge","statusCode","tokenId","layer","owner","getToken","Toolbar","handleChangeToolbar","onChange","htmlFor","defaultValue","Badge","size","sizeInPx","to","title","height","offset","resize","style","width","BadgeGroup","badgeGroup","forceCheck","badges","map","GroupsContainer","badgesToRender","badgeGroups","groupIndexes","lastMonth","setDate","getDate","sortedGroups","groupTitle","generateBadgesToRender","toolbarSettings","fuse","searchInput","filters","sorting","searchResults","search","badgesWithSize","filteredBadges","applySize","applyFilters","sortByDate","sortedArray","sort","b","searchQuery","res","item","virtual","AddressTokens","setBadgesToRender","defaultSettings","Fuse","keys","shouldSort","threshold","formData","FormData","form","formObject","Object","fromEntries","entries","TokenDetails","badgeToRender","Profile","blockie","makeBlockie","TokensContainer","setError","setAccountBadges","setTokenID","setBadgeToRender","useRouteMatch","path","regex","unverifiedTokenID","parsedTokenID","tempAccountBadges","generateAccountBadges","App","match","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0c6105a3.chunk.js","sourcesContent":["const api = {\n  graphql: {\n    xdai: process.env.REACT_APP_POAP_API_GRAPHQL_XDAI_URL as string,\n    eth: process.env.REACT_APP_POAP_API_GRAPHQL_ETH_URL as string,\n  },\n  rest: process.env.REACT_APP_POAP_API_REST_URL as string,\n};\n\nconst ens = {\n  infura: {\n    projectID: process.env.REACT_APP_POAP_ENS_INFURA_PROJECTID as string,\n    key: process.env.REACT_APP_POAP_ENS_INFURA_KEY as string,\n  },\n};\n\nexport { api, ens };\n","import { useState, useCallback } from 'react';\nimport { api } from '../shared/constants';\n\nexport interface ParsedEvent extends Omit<ApiEvent, 'id' | 'image_url'> {\n  eventID: number;\n  timestampDate: number;\n  imageURL: string;\n}\n\nexport interface ApiEvent {\n  id: number;\n  fancy_id: string;\n  name: string;\n  description: string;\n  city: string;\n  country: string;\n  event_url: string;\n  image_url: string;\n  year: string;\n  start_date: string;\n  virtual_event: boolean;\n}\n\nexport type ApiEvents = ApiEvent[];\nexport type Events = ParsedEvent[];\nexport type FetchEventsCallback = () => void;\n\nexport interface EventsState {\n  alreadyFetched: boolean;\n  error: string;\n  data: Events | [];\n}\n\nexport interface EventsHook {\n  events: EventsState;\n  fetchEvents: FetchEventsCallback;\n}\n\nfunction parseEvents(apiEvents: ApiEvents): Events {\n  const poapEvents: Events = [];\n\n  apiEvents.forEach((event: ApiEvent) => {\n    const newEvent: ParsedEvent = {\n      eventID: event.id,\n      fancy_id: event.fancy_id,\n      name: event.name,\n      description: event.description,\n      city: event.city,\n      country: event.country,\n      event_url: event.event_url,\n      imageURL: event.image_url,\n      year: event.year.toString(),\n      start_date: event.start_date,\n      timestampDate: Date.parse(event.start_date),\n      virtual_event: event.virtual_event,\n    };\n\n    poapEvents[event.id] = newEvent;\n  });\n\n  return poapEvents;\n}\n\nconst useEvents = (): EventsHook => {\n  const [events, setEvents] = useState<EventsState>({\n    alreadyFetched: false,\n    error: '',\n    data: [],\n  });\n\n  const execute = async () => {\n    try {\n      const response: Response = await fetch(`${api.rest}/events`);\n      const jsonResponse = await response.json();\n\n      if (!response.ok) {\n        throw new Error(jsonResponse);\n      }\n\n      const data: Events = parseEvents(jsonResponse);\n\n      setEvents({\n        alreadyFetched: true,\n        error: '',\n        data,\n      });\n    } catch {\n      setEvents({\n        alreadyFetched: true,\n        error: `there was an error fetching EVENTS from the API`,\n        data: [],\n      });\n    }\n  };\n\n  // to avoid infinite calls when inside a `useEffect`\n  const fetchEvents = useCallback<FetchEventsCallback>(execute, []);\n\n  return { events, fetchEvents };\n};\n\nexport default useEvents;\n","import { ethers } from 'ethers';\nimport { useState, useCallback } from 'react';\nimport { ens } from '../shared/constants';\n\nexport interface AccountState {\n  verified: boolean;\n  error: string;\n  eth: string;\n  ens: string;\n  fancyEth: string;\n}\ntype SetAccountCallback = (unverifiedAccount: string) => void;\n\nexport interface AccountHook {\n  account: AccountState;\n  setAccount: SetAccountCallback;\n}\n\nconst generateFancyEth = (account: string): string =>\n  `${account.slice(0, 6)}...${account.slice(-4)}`;\n\nconst isValidAddress = (account: string): boolean => {\n  if (!/^(0x)?[0-9a-f]{40}$/i.test(account)) {\n    // check if it has the basic requirements of an address\n    return false;\n  }\n\n  return true;\n};\n\nfunction isValidEnsFormat(account: string): boolean {\n  const regex = new RegExp(/[a-z.0-9]{2,}.\\.eth$/);\n\n  return regex.test(account);\n}\n\nconst useAccount = (): AccountHook => {\n  const [account, setAccountState] = useState<AccountState>({\n    verified: false,\n    error: '',\n    eth: '',\n    ens: '',\n    fancyEth: '',\n  });\n  const [provider] = useState(\n    new ethers.providers.InfuraProvider('mainnet', {\n      infura: {\n        projectId: ens.infura.projectID,\n        projectSecret: ens.infura.key,\n      },\n    })\n  );\n\n  const execute = async (unverifiedAccount: string): Promise<void> => {\n    const lowerCaseAccount = unverifiedAccount.toLowerCase();\n\n    if (isValidAddress(lowerCaseAccount)) {\n      try {\n        const ensFromEth = await provider.lookupAddress(lowerCaseAccount);\n\n        setAccountState({\n          verified: true,\n          error: '',\n          eth: lowerCaseAccount,\n          ens: ensFromEth,\n          fancyEth: generateFancyEth(lowerCaseAccount),\n        });\n      } catch {\n        setAccountState({\n          verified: true,\n          error: '',\n          eth: lowerCaseAccount,\n          ens: '',\n          fancyEth: generateFancyEth(lowerCaseAccount),\n        });\n      }\n    } else {\n      try {\n        if (isValidEnsFormat(lowerCaseAccount)) {\n          const address = await provider.resolveName(lowerCaseAccount);\n\n          if (address) {\n            const lowerCaseAddress = address.toLowerCase();\n\n            setAccountState({\n              verified: true,\n              error: '',\n              eth: lowerCaseAddress,\n              ens: lowerCaseAccount,\n              fancyEth: generateFancyEth(lowerCaseAddress),\n            });\n          } else {\n            setAccountState({\n              verified: true,\n              error: 'The input is not an active ENS domain',\n              eth: '',\n              ens: '',\n              fancyEth: '',\n            });\n          }\n        } else {\n          setAccountState({\n            verified: true,\n            error:\n              'The input is not a valid ETH address neither a valid ETH domain.',\n            eth: '',\n            ens: '',\n            fancyEth: '',\n          });\n        }\n      } catch {\n        setAccountState({\n          verified: true,\n          error: 'there was an error resolving the ETH domain',\n          eth: '',\n          ens: '',\n          fancyEth: '',\n        });\n      }\n    }\n  };\n\n  const setAccount = useCallback<SetAccountCallback>(\n    (unverifiedAccount) => execute(unverifiedAccount),\n    []\n  );\n\n  return { account, setAccount };\n};\n\nexport default useAccount;\n","export default __webpack_public_path__ + \"static/media/loading.41748e91.svg\";","import './Loading.css';\nimport { useEffect } from 'react';\nimport loadingGif from './loading.svg';\n\nexport default function Loading(): JSX.Element {\n  // if it is loading for more than 5 seconds, refresh the whole app.\n  useEffect(() => {\n    // eslint-disable-next-line\n    const timmer = setTimeout(() => location.reload(), 5000);\n\n    return () => clearTimeout(timmer);\n  }, []);\n\n  return (\n    <div className=\"Loading\">\n      <img alt=\"loading\" src={loadingGif} />\n    </div>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport './EnterAddress.css';\nimport { useHistory } from 'react-router-dom';\nimport useAccount from '../../hooks/useAccount';\nimport Loading from '../../components/Loading/Loading';\n\nexport default function EnterAddress(): JSX.Element {\n  const history = useHistory();\n  const { account, setAccount } = useAccount();\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    const target = e.target as typeof e.target & {\n      unverifiedAccount: { value: string };\n    };\n    const unverifiedAccount = target.unverifiedAccount.value.trim();\n\n    if (unverifiedAccount !== '') setAccount(unverifiedAccount);\n  };\n\n  useEffect(() => {\n    if (account.verified) {\n      setLoading(false);\n      if (!account.error) {\n        history.push(`/scan/${account.ens || account.eth}`);\n      }\n    }\n  }, [account]);\n\n  if (loading) {\n    return <Loading />;\n  }\n\n  return (\n    <div className=\"EnterAddress\">\n      <p className=\"error\">{account.error}</p>\n      <p>\n        The <span>Proof of attendance protocol</span> (POAP) reminds you off the{' '}\n        <span>cool places</span> you’ve been to.\n      </p>\n      <form onSubmit={handleSubmit}>\n        <input\n          className=\"inputAddress\"\n          type=\"text\"\n          name=\"unverifiedAccount\"\n          id=\"unverifiedAccount\"\n          placeholder=\"vitalik.eth or 0xd8da6bf26964af9d7eed9e03e53415d37aa96045\"\n          maxLength={42}\n          minLength={6}\n          pattern=\"[a-zA-Z0-9\\.]+\"\n          autoFocus\n          required\n        />\n\n        <input className=\"submitButton\" type=\"submit\" value=\"Display Badges\" />\n      </form>\n    </div>\n  );\n}\n","import { useState, useCallback } from 'react';\nimport { api } from '../shared/constants';\n\nexport interface ApiGraphResponse {\n  account: { tokens: ApiToken[] };\n}\n\nexport interface ApiToken {\n  event: {\n    id: number;\n  };\n  id: string;\n}\n\nexport interface Token {\n  tokenID: number;\n  eventID: number;\n  chain: 'eth' | 'xdai';\n}\n\nexport type Tokens = Token[];\nexport type GetTokensCallback = (address: string) => void;\n\nexport interface TokensState {\n  alreadyFetched: boolean;\n  error: string;\n  data: Tokens | [];\n}\n\nexport interface TokensHook {\n  tokens: TokensState;\n  getTokens: GetTokensCallback;\n}\n\nfunction parseTokens(\n  chain: 'eth' | 'xdai',\n  apiTokens: ApiGraphResponse\n): Tokens | [] {\n  const parsedTokens: Tokens = [];\n\n  if (apiTokens.account) {\n    apiTokens.account.tokens.forEach((apiToken: ApiToken) => {\n      const tokenID = parseInt(apiToken.id, 10);\n      const eventID = apiToken.event.id;\n\n      parsedTokens.push({ chain, tokenID, eventID });\n    });\n  }\n\n  return parsedTokens;\n}\n\nasync function fetchGraphQL(\n  endpoint: string,\n  address: string\n): Promise<ApiGraphResponse> {\n  const query = `{account(id:\"${address}\"){tokens(first:1000){id,event{id,tokenCount}}}}`;\n  const params = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json', Accept: 'application/json' },\n    body: JSON.stringify({ query }),\n  };\n\n  const response: Response = await fetch(endpoint, params);\n  const jsonResponse = await response.json();\n\n  if (!response.ok || jsonResponse?.errors) {\n    throw new Error(jsonResponse);\n  }\n\n  return jsonResponse.data;\n}\n\nconst useTokens = (): TokensHook => {\n  const [tokens, setTokens] = useState<TokensState>({\n    alreadyFetched: false,\n    error: '',\n    data: [],\n  });\n\n  const execute = async (address: string): Promise<void> => {\n    try {\n      const [ethResponse, xdaiResponse] = await Promise.all([\n        fetchGraphQL(api.graphql.eth, address),\n        fetchGraphQL(api.graphql.xdai, address),\n      ]);\n\n      const data = [\n        ...parseTokens('eth', ethResponse),\n        ...parseTokens('xdai', xdaiResponse),\n      ];\n\n      setTokens({\n        alreadyFetched: true,\n        error: '',\n        data,\n      });\n    } catch {\n      setTokens({\n        alreadyFetched: true,\n        error: `there was an error fetching TOKENS`,\n        data: [],\n      });\n    }\n  };\n\n  // to avoid infinite calls when inside a `useEffect`\n  const getTokens = useCallback<GetTokensCallback>(\n    (address) => execute(address),\n    []\n  );\n\n  return { tokens, getTokens };\n};\n\nexport default useTokens;\n","import { useState, useCallback } from 'react';\nimport { AccountBadge, AccountBadges } from '../shared/types';\nimport { api } from '../shared/constants';\n\ninterface ApiToken {\n  event: {\n    id: number;\n    fancy_id: string;\n    signer_ip: string;\n    signer: string;\n    name: string;\n    event_url: string;\n    image_url: string;\n    country: string;\n    city: string;\n    description: string;\n    year: number;\n    start_date: string;\n    end_date: string;\n    expiry_date: string;\n    created_date: string;\n  };\n  tokenId: string;\n  owner: string;\n  layer: string;\n}\n\nconst parseToken = (apiToken: ApiToken): AccountBadge => ({\n  tokenID: parseInt(apiToken.tokenId, 10),\n  chain: apiToken.layer === 'Layer2' ? 'xdai' : 'eth',\n  eventID: apiToken.event.id,\n  fancy_id: apiToken.event.fancy_id,\n  name: apiToken.event.name,\n  description: apiToken.event.description,\n  city: apiToken.event.city,\n  country: apiToken.event.country,\n  event_url: apiToken.event.event_url,\n  imageURL: apiToken.event.image_url,\n  year: apiToken.event.year.toString(),\n  start_date: apiToken.event.start_date,\n  timestampDate: 0,\n  virtual_event: false,\n  owner: apiToken.owner,\n});\n\nexport type GetTokenCallback = (\n  tokenID: number,\n  accountBadges: AccountBadges\n) => void;\n\nexport interface TokenState {\n  alreadyFetched: boolean;\n  error: string;\n  data: AccountBadge | null;\n}\n\nexport interface TokenHook {\n  token: TokenState;\n  getToken: GetTokenCallback;\n}\n\nconst useToken = (): TokenHook => {\n  const [token, setToken] = useState<TokenState>({\n    alreadyFetched: false,\n    error: '',\n    data: null,\n  });\n\n  const execute = async (\n    tokenID: number,\n    accountBadges: AccountBadges\n  ): Promise<void> => {\n    try {\n      if (accountBadges.length > 0) {\n        const badge = accountBadges.filter(\n          (accountBadge) => accountBadge.tokenID === tokenID\n        );\n        const data = badge[0];\n\n        setToken({\n          alreadyFetched: true,\n          error: '',\n          data,\n        });\n      } else {\n        const response: Response = await fetch(`${api.rest}/token/${tokenID}`);\n        const jsonResponse = await response.json();\n\n        if (!response.ok || jsonResponse?.statusCode) {\n          throw new Error(jsonResponse);\n        }\n\n        const data: AccountBadge = parseToken(jsonResponse);\n\n        setToken({\n          alreadyFetched: true,\n          error: '',\n          data,\n        });\n      }\n    } catch {\n      setToken({\n        alreadyFetched: true,\n        error: `there was an error fetching TOKEN`,\n        data: null,\n      });\n    }\n  };\n\n  const getToken = useCallback<GetTokenCallback>(\n    (tokenID, accountBadges) => execute(tokenID, accountBadges),\n    []\n  );\n\n  return { token, getToken };\n};\n\nexport default useToken;\n","import React from 'react';\nimport './Toolbar.css';\n\nexport interface Props {\n  handleChangeToolbar: (e: React.ChangeEvent<HTMLFormElement>) => void;\n}\n\nexport default function Toolbar({ handleChangeToolbar }: Props): JSX.Element {\n  return (\n      <form className=\"Toolbar\" onChange={handleChangeToolbar} onSubmit={(e) => e.preventDefault()}>\n        <input\n          className=\"search\"\n          type=\"search\"\n          name=\"searchInput\"\n          id=\"searchInput\"\n          placeholder=\"search by name, description or location\"\n        />\n\n          <label htmlFor=\"chain\">\n            Blockchain:\n            <select name=\"chain\" defaultValue=\"all\">\n              <option value=\"all\">All</option>\n              <option value=\"eth\">ETH</option>\n              <option value=\"xdai\">xDAI</option>\n            </select>\n          </label>\n\n          <label htmlFor=\"location\">\n            Location:\n            <select name=\"location\" id=\"location\" defaultValue=\"all\">\n              <option value=\"all\">All</option>\n              <option value=\"premises\">Premises</option>\n              <option value=\"virtual\"> Virtual</option>\n            </select>\n          </label>\n\n          <label htmlFor=\"size\">\n            Size:\n            <select name=\"size\" id=\"size\" defaultValue=\"large\">\n              <option value=\"large\">Large</option>\n              <option value=\"small\">Small</option>\n            </select>\n          </label>\n\n          <label htmlFor=\"sorting\">\n            Sorting:\n            <select name=\"sorting\" id=\"sorting\" defaultValue=\"newest\">\n              <option value=\"newest\">Newest</option>\n              <option value=\"oldest\">Oldest</option>\n            </select>\n          </label>\n\n      </form>\n\n  );\n}\n","import './Badge.css';\nimport { Link } from 'react-router-dom';\nimport LazyLoad from 'react-lazyload';\nimport { BadgeWithSize } from '../../shared/types';\n\ninterface Props {\n  badge: BadgeWithSize;\n}\n\nexport default function Badge({ badge }: Props): JSX.Element {\n  const { imageURL, name, size, tokenID } = badge;\n  const sizeInPx = size === 'large' ? '240px' : '140px';\n\n  return (\n    <Link className={`link${size}`} to={`/token/${tokenID}`} title={name}>\n      <LazyLoad\n        height={sizeInPx}\n        offset={400}\n        resize\n        style={{ width: sizeInPx }}\n      >\n        <img\n          className={`BadgeImage ${size}`}\n          src={imageURL}\n          alt={name}\n          title={name}\n        />\n      </LazyLoad>\n    </Link>\n  );\n}\n","import './BadgeGroup.css';\nimport { forceCheck } from 'react-lazyload';\nimport { useEffect } from 'react';\nimport { IBadgeGroup } from '../../shared/types';\nimport Badge from '../Badge/Badge';\n\ninterface Props {\n  badgeGroup: IBadgeGroup;\n}\n\nexport default function BadgeGroup({ badgeGroup }: Props): JSX.Element {\n  useEffect(() => {\n    setTimeout(forceCheck, 50);\n  }, []);\n\n  return (\n    <div className=\"BadgeGroup\">\n      <h1>{badgeGroup.title}</h1>\n      {badgeGroup.badges.map((badge) => (\n        <Badge key={badge.tokenID} badge={badge} />\n      ))}\n    </div>\n  );\n}\n","import BadgeGroup from '../components/BadgeGroup/BadgeGroup';\nimport { BadgesToRender, IBadgeGroup, BadgeGroups } from '../shared/types';\n\ninterface Props {\n  badgesToRender: BadgesToRender;\n}\n\nexport default function GroupsContainer({\n  badgesToRender,\n}: Props): JSX.Element {\n  const badgeGroups: BadgeGroups = {};\n  const groupIndexes: string[] = [];\n  const current = new Date();\n  const lastMonth = current.setDate(new Date().getDate() - 30);\n\n  badgesToRender.forEach((badge) => {\n    if (badge.timestampDate > lastMonth) {\n      if (badgeGroups.lastMonth) {\n        badgeGroups.lastMonth.badges.push(badge);\n      } else {\n        badgeGroups.lastMonth = { title: 'Last 30 days', badges: [badge] };\n        groupIndexes.push('lastMonth');\n      }\n    } else if (badgeGroups[badge.year]) {\n      badgeGroups[badge.year].badges.push(badge);\n    } else {\n      badgeGroups[badge.year] = { title: badge.year, badges: [badge] };\n      groupIndexes.push(badge.year);\n    }\n  });\n  const sortedGroups: IBadgeGroup[] = groupIndexes.map(\n    (groupTitle: string) => badgeGroups[groupTitle]\n  );\n\n  return (\n    <>\n      {sortedGroups.map((badgeGroup) => (\n        <BadgeGroup key={badgeGroup.title} badgeGroup={badgeGroup} />\n      ))}\n    </>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport Fuse from 'fuse.js';\nimport Toolbar from '../../components/Toolbar/Toolbar';\nimport GroupsContainer from '../../containers/GroupsContainer';\nimport './AddressTokens.css';\nimport {\n  AccountBadges,\n  AccountBadge,\n  FilteredBadges,\n  Size,\n  ToolbarSettings,\n  BadgesToRender,\n  Sorting,\n  SortedBadges,\n  SearchedBadges,\n  Filters,\n  Location,\n  Chain,\n  BadgesWithSize,\n} from '../../shared/types';\n\ninterface Props {\n  accountBadges: AccountBadges;\n}\n\nconst applySize = (size: Size, filteredBadges: FilteredBadges) =>\n  filteredBadges.map((badge) => ({ ...badge, size }));\n\nconst generateBadgesToRender = (\n  toolbarSettings: ToolbarSettings,\n  fuse: Fuse<AccountBadge>,\n  accountBadges: AccountBadges\n): BadgesToRender => {\n  const { searchInput, filters, sorting, size } = toolbarSettings;\n  const searchResults = search(searchInput, accountBadges, fuse);\n  const filteredBadges = applyFilters(searchResults, filters);\n  const badgesWithSize = applySize(size, filteredBadges);\n\n  return sortByDate(badgesWithSize, sorting);\n};\n\nconst sortByDate = (\n  badgesWithSize: BadgesWithSize,\n  sorting: Sorting\n): SortedBadges => {\n  if (badgesWithSize.length <= 1) return badgesWithSize;\n\n  const sortedArray: SortedBadges = badgesWithSize.slice();\n\n  if (sorting === 'newest') {\n    return sortedArray.sort((a, b) => b.timestampDate - a.timestampDate);\n  }\n\n  return sortedArray.sort((a, b) => a.timestampDate - b.timestampDate);\n};\n\nconst search = (\n  searchInput: string,\n  accountBadges: AccountBadges,\n  fuse: Fuse<AccountBadge>\n): SearchedBadges => {\n  const searchQuery = searchInput.trim();\n\n  if (searchQuery) {\n    const result = fuse.search(searchQuery);\n\n    return result.map((res) => res.item);\n  }\n\n  return accountBadges;\n};\n\nconst applyFilters = (\n  searchResults: AccountBadges,\n  filters: Filters\n): FilteredBadges => {\n  if (filters.chain !== 'all' || filters.location !== 'all') {\n    return searchResults.filter((badge) => {\n      const virtual = filters.location === 'virtual';\n\n      return (\n        (badge.chain === filters.chain || filters.chain === 'all') &&\n        (badge.virtual_event === virtual || filters.location === 'all')\n      );\n    });\n  }\n\n  return searchResults;\n};\n\nexport default function AddressTokens({ accountBadges }: Props): JSX.Element {\n  const [badgesToRender, setBadgesToRender] = useState<BadgesToRender>([]);\n  const defaultSettings: ToolbarSettings = {\n    filters: { chain: 'all', location: 'all' },\n    searchInput: '',\n    size: 'large',\n    sorting: 'newest',\n  };\n  const handleChangeToolbar = (e: React.ChangeEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.target.form);\n    const formObject = Object.fromEntries(formData.entries());\n    const filters: Filters = {\n      chain: formObject.chain as Chain,\n      location: formObject.location as Location,\n    };\n    const toolbarSettings: ToolbarSettings = {\n      filters,\n      searchInput: formObject.searchInput as string,\n      size: formObject.size as Size,\n      sorting: formObject.sorting as Sorting,\n    };\n\n    setBadgesToRender(\n      generateBadgesToRender(toolbarSettings, fuse, accountBadges)\n    );\n  };\n\n  const fuse = new Fuse(accountBadges, {\n    keys: ['name', 'description', 'city', 'country', 'year', 'end_date'],\n    shouldSort: false,\n    threshold: 0.2,\n  });\n\n  useEffect(\n    () =>\n      setBadgesToRender(\n        generateBadgesToRender(defaultSettings, fuse, accountBadges)\n      ),\n    []\n  );\n\n  return (\n    <div className=\"AddressTokens\">\n      <p>{`You have attended ${accountBadges.length} events in the past.`}</p>\n\n      <Toolbar handleChangeToolbar={handleChangeToolbar} />\n      {accountBadges.length !== badgesToRender.length &&\n      badgesToRender.length > 0 ? (\n        <p>{`Currently showing you only ${badgesToRender.length} badges based on your filters`}</p>\n      ) : null}\n\n      {badgesToRender.length > 0 ? (\n        <GroupsContainer badgesToRender={badgesToRender} />\n      ) : (\n        <p>\n          Currently not showing any results given your filters and search\n          criteria.\n        </p>\n      )}\n    </div>\n  );\n}\n","import './TokenDetails.css';\n\nimport { AccountBadge } from '../../shared/types';\n\ninterface Props {\n  badgeToRender: AccountBadge | null | undefined;\n}\n\nexport default function TokenDetails({ badgeToRender }: Props): JSX.Element {\n  return (\n    <div className=\"TokenDetails\">\n      {badgeToRender ? (\n        <>\n          <h1>{badgeToRender.name}</h1>\n          <div className=\"container\">\n            <img src={badgeToRender.imageURL} alt={badgeToRender.name} />\n            <div className=\"textContent\">\n              <div className=\"tokenInfo\">\n                <h3>Token</h3>\n                <h4>ID</h4>\n                <h6>{badgeToRender.tokenID}</h6>\n                <h4>Blockchain</h4>\n                <h6>{badgeToRender.chain}</h6>\n                <h4>Owner</h4>\n                <h6>{badgeToRender.owner}</h6>\n              </div>\n              <div className=\"eventInfo\">\n                <h3>Event</h3>\n                {badgeToRender.event_url ? (\n                  <>\n                    <h4>URL</h4>\n                    <h6>{badgeToRender.event_url}</h6>\n                  </>\n                ) : null}\n                <h4>Date</h4>\n                <h6>{badgeToRender.start_date}</h6>\n\n                <h4>Location</h4>\n                <h6>\n                  {badgeToRender.city ? `${badgeToRender.city}, ` : null}\n                  {badgeToRender.country}\n                  {badgeToRender.virtual_event ? ' (virtual event)' : null}\n                </h6>\n                {badgeToRender.description ? (\n                  <>\n                    <h4>Description</h4>\n                    <p>{badgeToRender.description}</p>\n                  </>\n                ) : null}\n              </div>\n            </div>\n          </div>\n        </>\n      ) : null}\n    </div>\n  );\n}\n","import './Error.css';\n\ninterface Props {\n  error: string;\n}\n\nexport default function Error({ error }: Props): JSX.Element {\n  return (\n    <div className=\"Error\">\n      <h2>{error}</h2>\n    </div>\n  );\n}\n","import './Profile.css';\nimport makeBlockie from 'ethereum-blockies-base64';\nimport { Link } from 'react-router-dom';\nimport { AccountState } from '../../hooks/useAccount';\n\ninterface Props {\n  account: AccountState;\n}\n\nexport default function Profile({ account }: Props): JSX.Element {\n  const { ens, fancyEth, eth } = account;\n  const blockie = eth ? makeBlockie(eth) : null;\n\n  return (\n    <Link className=\"Profile\" to={`/scan/${ens || eth}`} title=\"scan address\">\n      {blockie ? <img alt=\"blockie\" src={blockie} /> : null}\n      <h4>{ens || fancyEth}</h4>\n      {ens ? <h5>({fancyEth})</h5> : null}\n    </Link>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport { useRouteMatch } from 'react-router-dom';\nimport { EventsState } from '../api/useEvents';\n\nimport useTokens from '../api/useTokens';\nimport useToken from '../api/useToken';\nimport AddressTokens from '../pages/AddressTokens/AddressTokens';\nimport TokenDetails from '../pages/TokenDetails/TokenDetails';\nimport Loading from '../components/Loading/Loading';\nimport Error from '../components/Error/Error';\nimport Profile from '../components/Profile/Profile';\n\nimport useAccount from '../hooks/useAccount';\nimport { Events, Tokens, AccountBadges, AccountBadge } from '../shared/types';\n\ninterface Props {\n  events: EventsState;\n}\n\ninterface Params {\n  unverifiedAccount: string;\n  unverifiedTokenID: string;\n}\n\nfunction generateAccountBadges(\n  events: Events,\n  tokens: Tokens,\n  owner: string\n): AccountBadges {\n  if (tokens.length === 0) return [];\n\n  return tokens.map((token) => {\n    const { tokenID, chain, eventID } = token;\n\n    return { owner, tokenID, chain, ...events[eventID] };\n  });\n}\n\nexport default function TokensContainer({ events }: Props): JSX.Element {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string>('');\n  const [accountBadges, setAccountBadges] = useState<AccountBadges>([]);\n  const [tokenID, setTokenID] = useState<number>();\n  const [badgeToRender, setBadgeToRender] = useState<AccountBadge | null>();\n  const { account, setAccount } = useAccount();\n  const { tokens, getTokens } = useTokens();\n  const { token, getToken } = useToken();\n  const { path, params } = useRouteMatch<Params>();\n\n  useEffect(() => {\n    if (path === '/scan/:unverifiedAccount') {\n      const { unverifiedAccount }: Params = params;\n\n      if (\n        unverifiedAccount !== account.eth &&\n        unverifiedAccount !== account.ens\n      ) {\n        setAccount(unverifiedAccount);\n      } else if (!tokens.alreadyFetched) {\n        setLoading(true);\n        getTokens(account.eth);\n      }\n    }\n    if (path === '/token/:unverifiedTokenID') {\n      const regex = new RegExp('^\\\\d+$');\n      const { unverifiedTokenID }: Params = params;\n\n      if (unverifiedTokenID !== tokenID?.toString()) {\n        if (unverifiedTokenID && regex.test(unverifiedTokenID)) {\n          const parsedTokenID = parseInt(unverifiedTokenID, 10);\n\n          setTokenID(parsedTokenID);\n        } else {\n          setError('not a valid token ID');\n          setLoading(false);\n        }\n      }\n    }\n  }, [path]);\n\n  useEffect(() => {\n    if (path === '/scan/:unverifiedAccount') {\n      if (account.verified) {\n        if (account.error) {\n          setError(account.error);\n          setLoading(false);\n        } else {\n          getTokens(account.eth);\n        }\n      }\n    }\n  }, [account]);\n\n  useEffect(() => {\n    if (tokenID) {\n      getToken(tokenID, accountBadges);\n    }\n  }, [tokenID]);\n\n  useEffect(() => {\n    if (tokens.alreadyFetched && events.alreadyFetched) {\n      if (tokens.error || events.error) {\n        setError(tokens.error || events.error);\n      } else {\n        const tempAccountBadges = generateAccountBadges(\n          events.data,\n          tokens.data,\n          account.eth\n        );\n\n        if (tempAccountBadges.length === 0) {\n          setError('no badges');\n        } else {\n          setAccountBadges(tempAccountBadges);\n        }\n      }\n      setLoading(false);\n    }\n  }, [tokens, events]);\n\n  useEffect(() => {\n    if (token.alreadyFetched) {\n      if (token.error) {\n        setError(token.error);\n      } else {\n        if (token.data) setAccount(token.data.owner);\n        setBadgeToRender(token.data);\n      }\n      setLoading(false);\n    }\n  }, [token]);\n\n  const renderComponent = () => {\n    if (loading) {\n      return <Loading />;\n    }\n\n    if (error) {\n      return <Error error={error} />;\n    }\n\n    if (path === '/scan/:unverifiedAccount') {\n      return (\n        <>\n          <Profile account={account} />\n          <AddressTokens accountBadges={accountBadges} />\n        </>\n      );\n    }\n\n    return (\n      <>\n        <Profile account={account} />\n        <TokenDetails badgeToRender={badgeToRender} />\n      </>\n    );\n  };\n\n  return renderComponent();\n}\n","import { useEffect } from 'react';\nimport { Route, RouteComponentProps, Switch } from 'react-router-dom';\nimport useEvents from '../api/useEvents';\n\n// components\nimport EnterAddress from '../pages/EnterAddress/EnterAddress';\nimport TokensContainer from './TokensContainer';\n\nfunction App({ match }: RouteComponentProps): JSX.Element {\n  const { events, fetchEvents } = useEvents();\n\n  // fetch all the Events from the POAP REST API, parse them a bit and store them\n  // this are used for the AddressToken view, not for TokenDetails.\n  useEffect(() => {\n    if (match.path === '/scan/' || match.path === '/') fetchEvents();\n  }, []);\n\n  return (\n    <Switch>\n      <Route path=\"/scan/:unverifiedAccount\">\n        <TokensContainer events={events} />\n      </Route>\n      <Route path=\"/token/:unverifiedTokenID\">\n        <TokensContainer events={events} />\n      </Route>\n      <Route path=\"/\" component={EnterAddress} />\n    </Switch>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport './index.css';\nimport App from './containers/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Switch>\n        <Route path=\"/\" component={App} />\n      </Switch>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}